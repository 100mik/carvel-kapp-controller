apiVersion: kapp.k14s.io/v1alpha1
kind: Config
rebaseRules:
- ytt:
    overlayContractV1:
      overlay.yml: |
        #@ load("@ytt:data", "data")
        #@ load("@ytt:json", "json")
        #@ load("@ytt:overlay", "overlay")

        #@ def get_rev(annotations):
        #@  if hasattr(annotations, "packaging.carvel.dev/repo-rev"):
        #@    return int(annotations["packaging.carvel.dev/repo-rev"])
        #@  else:
        #@    return -1
        #@  end
        #@ end

        #@ if not hasattr(data.values.existing.metadata.annotations, "packaging.carvel.dev/package-repository-ref"):
        #@   msg = "Error: cannot overwrite package " + data.values.existing.metadata.name + " because it was not created by a package repository."
        #@   print(msg)
        #@   fail(msg)
        #@ end

        #@ if json.encode(data.values.existing.spec) == json.encode(data.values.new.spec):
        #@overlay/match by=overlay.all
        ---
        metadata:
          #@overlay/match missing_ok=True
          annotations:
            #@overlay/match missing_ok=True
            kapp.k14s.io/noop: ""
        #@ elif get_rev(data.values.existing.metadata.annotations) > get_rev(data.values.new.metadata.annotations):
        #@overlay/match by=overlay.all
        ---
        metadata:
          #@overlay/match missing_ok=True
          annotations:
            #@overlay/match missing_ok=True
            kapp.k14s.io/noop: ""
        #@ elif get_rev(data.values.existing.metadata.annotations) < get_rev(data.values.new.metadata.annotations):
        #@ print("replacing existing older rev with newer rev")
        #@ end
  resourceMatchers:
  - apiVersionKindMatcher: {apiVersion: data.packaging.carvel.dev/v1alpha1, kind: Package}
